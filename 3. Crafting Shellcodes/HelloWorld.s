//Blog Training: https://www.briansteffens.com/introduction-to-64-bit-assembly/01-hello-world/

section .data //Data section contains data which the program will use. When the program runs, the contents of this section will be loaded into memory and made available for use by the code.
    message db "Hello, World!", 10 //message = The name you will use for later. db = The data type, db means that the data being declared is a series of bytes. Bytes are 8bit integers, which with a value from 0-255. , 10 = This is the ASCII code for a newline character.

section .text // Markrs the end of the data section and the beginning of the text section, which is where the code godes.

global _start //Defining the entry-point of the program. When the program is run, the line immediately following _start: will be executed. This is how the computer knows which instruction to start with when the program is run.
_start:
    move rax, 1 //Put value 1 into the register rax.
    move rdi, 1 //Loading the value 1 into the register rdi. 1 stands for STDOUT, which means to write to the console. This could also be 2 to write to STDERR, which is normally where errors are written.
    mov rsi, message //rsi set to the beginning of our "Hello World!" string.
    mov rdx, 14 //How many bytes of message to write. 14 is how many characters our string is.
    syscall // Lets the OS know we have some work for it to do.


// Code Without Comments:
section .data
    message db "Hello, world!", 10
section .text
global _start
_start:
    mov rax, 1
    mov rdi, 1
    mov rsi, message
    mov rdx, 14
    syscall
